name: CI

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: "-D warnings"
  CARGO_INCREMENTAL: 0

jobs:
  # Quick format and lint checks
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
        
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      
    - name: Check formatting
      run: cargo fmt --all -- --check
      
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

  # Build job for multiple platforms
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust: [stable]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
            
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          pkg-config \
          libssl-dev \
          libclang-dev \
          protobuf-compiler \
          cmake
          
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # Update brew and handle existing installations
        brew update || true
        # Uninstall any existing cmake from different tap
        brew uninstall --ignore-dependencies cmake 2>/dev/null || true
        # Install required dependencies
        brew install cmake pkg-config protobuf || brew upgrade cmake pkg-config protobuf
        
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
        target: ${{ matrix.target }}
        
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.os }}-${{ matrix.rust }}
        
    - name: Build (Debug)
      run: cargo build --all --verbose
      
    - name: Build (Release)
      run: cargo build --all --release --verbose
      
    - name: Upload binary artifact
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: adic-${{ matrix.target }}
        path: target/release/adic

  # Comprehensive test suite
  test:
    name: Test (${{ matrix.os }}, ${{ matrix.rust }})
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust: [stable, '1.70']  # Test MSRV (Minimum Supported Rust Version)
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          pkg-config \
          libssl-dev \
          libclang-dev \
          protobuf-compiler \
          cmake
          
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # Update brew and handle existing installations
        brew update || true
        # Uninstall any existing cmake from different tap
        brew uninstall --ignore-dependencies cmake 2>/dev/null || true
        # Install required dependencies
        brew install cmake pkg-config protobuf || brew upgrade cmake pkg-config protobuf
        
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
        
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.os }}-${{ matrix.rust }}-test
        
    - name: Run unit tests
      run: cargo test --lib --all --verbose
      
    - name: Run integration tests
      run: cargo test --test '*' --verbose
      timeout-minutes: 10
      
    - name: Run doc tests
      run: cargo test --doc --all --verbose
      
    - name: Run all tests with all features
      run: cargo test --all --all-features --verbose
      
    - name: Test with release mode
      run: cargo test --all --release

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Install cargo-audit
      run: cargo install cargo-audit
      
    - name: Run security audit
      run: cargo audit

  # Check that documentation builds
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      
    - name: Build documentation
      run: cargo doc --all --no-deps --document-private-items
      env:
        RUSTDOCFLAGS: "-D warnings"
        
    - name: Check for broken links in docs
      run: |
        cargo doc --all --no-deps
        # Check that all links in documentation are valid
        
  # Verify installation instructions work
  verify-install:
    name: Verify Installation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install system dependencies as per README
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          pkg-config \
          libssl-dev \
          libclang-dev \
          protobuf-compiler
          
    - name: Install Rust as per README
      run: |
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        source $HOME/.cargo/env
        
    - name: Build as per README
      run: |
        source $HOME/.cargo/env
        cargo build --release
        
    - name: Test CLI commands as per README
      run: |
        source $HOME/.cargo/env
        ./target/release/adic --help
        ./target/release/adic keygen --output test.key
        ./target/release/adic init --params v1
        ./target/release/adic test --count 2
        
    - name: Run verification script
      run: |
        source $HOME/.cargo/env
        chmod +x verify_install.sh
        ./verify_install.sh

  # Release job (only on tags)
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [lint, build, test, security, docs]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          pkg-config \
          libssl-dev \
          libclang-dev \
          protobuf-compiler \
          cmake
          
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      
    - name: Build release binary
      run: cargo build --all --release
      
    - name: Create release archive
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        mkdir -p adic-$VERSION
        cp target/release/adic adic-$VERSION/
        cp README.md CHANGELOG.md LICENSE adic-$VERSION/
        tar czf adic-$VERSION-linux-x86_64.tar.gz adic-$VERSION
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: adic-*.tar.gz
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Summary job to ensure all checks pass
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [lint, build, test, security, docs, verify-install]
    if: always()
    steps:
    - name: Check if all jobs succeeded
      run: |
        if [[ "${{ needs.lint.result }}" != "success" || \
              "${{ needs.build.result }}" != "success" || \
              "${{ needs.test.result }}" != "success" || \
              "${{ needs.security.result }}" != "success" || \
              "${{ needs.docs.result }}" != "success" || \
              "${{ needs.verify-install.result }}" != "success" ]]; then
          echo "One or more CI jobs failed"
          exit 1
        fi
        echo "All CI jobs passed successfully!"