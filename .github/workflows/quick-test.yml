name: Quick Tests

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [ develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  quick-check:
    name: Quick Check
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          pkg-config \
          libssl-dev \
          libclang-dev \
          protobuf-compiler
          
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
        
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        shared-key: "quick-test"
        
    - name: Check formatting
      run: cargo fmt --all -- --check
      
    - name: Run clippy (errors only)
      run: cargo clippy --all-targets -- -D errors
      
    - name: Build check (no actual build)
      run: cargo check --all
      
    - name: Run fast unit tests
      run: |
        cargo test --lib --all -- --test-threads=4
      env:
        RUST_TEST_THREADS: 4
        
    - name: Build documentation (check only)
      run: cargo doc --all --no-deps --document-private-items
      env:
        RUSTDOCFLAGS: "-D warnings"
        
    - name: Test specific critical modules
      run: |
        cargo test --package adic-types --lib
        cargo test --package adic-math --lib
        cargo test --package adic-consensus --lib
        cargo test --package adic-economics --lib
        
    - name: Comment PR with test status
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('Quick Test Results')
          });
          
          const output = `## ✅ Quick Test Results
          
          All critical checks passed:
          - 🎨 Code formatting: **Passed**
          - 📝 Clippy lints: **Passed**
          - 🔨 Build check: **Passed**
          - 🧪 Unit tests: **Passed**
          - 📚 Documentation: **Passed**
          
          Full CI suite will run on merge to main.`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: output
            });
          }